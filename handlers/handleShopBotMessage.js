import getShopBotUserOrNullByChatId from "../middlewares/getShopBotUserOrNullByChatId.js";
import {
    channelChatId,
    channelLink,
    channelName,
    googleMapsLocation,
    shopBotAdminCommands,
    shopReceiveGoodLink,
    shopRulesLink,
    shopTikTokLink,
    techSuppportBotLink,
    workBotLink,
} from "../config.js";
import shopBot from "../utils/shopBot.js";
import {
    messageForAllShopBotUsers,
    newShopBotCategoryNameListener,
    shopBotCategoryToEditListener,
    shopBotCategoryToEditNewNameListener,
    newShopBotItemCategoryListener,
    newShopBotItemCost,
    newShopBotItemCostListener,
    newShopBotItemDescription,
    newShopBotItemDescriptionListener,
    newShopBotItemName,
    newShopBotItemNameListener,
    shopCategoryDeleteListener,
    userToBlockChatIdListener,
    newShopBotCategoryCostPerKiloListener,
    newShopBotCategoryCountPerKiloListener,
    shopBotCategoryToEditCostListener,
    shopBotCategoryToEditNewCostListener,
    shopBotCategoryToEditNewCountListener,
    shopBotCategoryToEditCountListener,
    setNewShopCardNumber,
    setNewShopCardHolderName,
    setNewShopCookingCost,
    orderReceiverNameListener,
    orderReceiverName,
    orderReceiverPhoneNumberListener,
    orderReceiverPhoneNumber,
    orderReceiverCityListener,
    orderReceiverCity,
    orderReceiverDeliveryInfoListener,
    orderReceiverDeliveryInfo,
    orderCategoryListener,
    orderCategory,
    orderWeightListener,
    orderIsCookedListener,
    orderWeight,
    documentReceiptListener,
    orderIsCooked,
    orderCookingTypeListener,
    orderCookingType
} from "../utils/maps.js";
import giveShopUserAdminStatus from "../services/giveShopUserAdminStatus.js";
import getShopBotUsersCountFromDb from "../middlewares/getShopBotUsersCountFromDb.js";
import getShopBotUsersChatIds from "../middlewares/getShopBotUsersChatIds.js";
import {
    shopBotMainMenuKeyboard
} from "../utils/keyboards.js";
import insertNewShopBotCategoryInDb from "../services/insertNewShopBotCategoryInDb.js";
import getAllShopCategoriesFromDb from "../middlewares/getAllShopCategoriesFromDb.js";
import getShopBotCategoryFromDbByName from "../middlewares/getShopBotCategoryFromDbByName.js";
import insertNewShopBotGoodInDb from "../services/insertNewShopBotGoodInDb.js";
import getAllShopBotGoodsFromDb from "../middlewares/getAllShopBotGoodsFromDb.js";
import getShopBotUserRefferalsCount from "../middlewares/getShopBotUserRefferalsCount.js";
import getAllCrabsGoodsFromDb from "../middlewares/getAllCrabsGoodsFromDb.js";
import getCardFromDb from "../middlewares/getCardFromDb.js";
import getCookingCostPerKiloFromDb from "../middlewares/getCookingCostPerKiloFromDb.js";

export default async function handleShopBotMessage(db) {
    shopBot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;

        const foundUserOrNull = await getShopBotUserOrNullByChatId(chatId.toString(), db);
        // checking access
        if (!foundUserOrNull) {
            return 0;
        }

        if (foundUserOrNull.isBlocked) {
            return await shopBot.sendMessage(chatId, '–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @Hard_support (https://t.me/Hard_support)', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ù–∞–ø–∏—Å–∞—Ç—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
                            url: 'https://t.me/Hard_support'
                        }]
                    ]
                }
            })
        }

        // const chatMembership = await shopBot.getChatMember(channelChatId, chatId);

        // if (chatMembership.status === 'left') {
        //     if (text !== '/start') {
        //         console.log('sosi')
        //         return await shopBot.sendMessage(chatId, '–î–ª—è –Ω–∞—á–∞–ª–∞ –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!', {
        //             reply_markup: {
        //                 inline_keyboard: [
        //                     [{
        //                         text: channelName,
        //                         url: channelLink
        //                     }],
        //                     [{
        //                         text: "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        //                         callback_data: 'check_subscription'
        //                     }]
        //                 ]
        //             }
        //         })
        //     }

        //     return 0;
        // } // end of checking Access


        // check if user is admin
        if (foundUserOrNull.status === 'admin') {
            if (text === '/sendAdvertisingMessage') {
                await shopBot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞', {
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–û—Ç–º–µ–Ω–∏—Ç—å"
                            }]
                        ]
                    }
                });

                return messageForAllShopBotUsers.set(chatId.toString(), 'true');
            }

            if (text === '/statistic') {
                const {
                    usersNum
                } = await getShopBotUsersCountFromDb(db);

                return await shopBot.sendMessage(chatId, '<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>' + '\n \n' +
                    `<i>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ</i>: ${usersNum}`, {
                        parse_mode: "HTML"
                    }
                );
            }

            if (text === '/addCategory') {
                newShopBotCategoryNameListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ </b>' + '\n \n' +
                    `<i>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" —â–æ–± –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</i>`, {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    }
                );
            }

            if (text === '/deleteCategory') {
                const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                if (!crabsCategoriesFromDB) {
                    return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                        parse_mode: "HTML"
                    })
                }

                const crabsList = crabsCategoriesFromDB.map((crab) => [{
                    text: crab.name
                }]);

                shopCategoryDeleteListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                    '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                ...crabsList,
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    }
                )
            }

            if (text === '/editCategoryName') {
                const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                if (!crabsCategoriesFromDB) {
                    return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                        parse_mode: "HTML"
                    })
                }

                const crabsList = crabsCategoriesFromDB.map((crab) => [{
                    text: crab.name
                }]);

                shopBotCategoryToEditListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                    '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É –Ω–∞–∑–≤–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                ...crabsList,
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    }
                )

            }

            if (text === '/editCategoryCost') {
                const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                if (!crabsCategoriesFromDB) {
                    return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                        parse_mode: "HTML"
                    })
                }

                const crabsList = crabsCategoriesFromDB.map((crab) => [{
                    text: crab.name
                }]);

                shopBotCategoryToEditCostListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                    '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                ...crabsList,
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    }
                )
            }

            if (text === '/editCategoryCount') {
                const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                if (!crabsCategoriesFromDB) {
                    return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                        parse_mode: "HTML"
                    })
                }

                const crabsList = crabsCategoriesFromDB.map((crab) => [{
                    text: crab.name
                }]);

                shopBotCategoryToEditCountListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                    '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–∞–∫—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                ...crabsList,
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    }
                )
            }

            if (text === '/changeBlockStatusUser') {
                userToBlockChatIdListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥–∏—Ç–µ —á–∞—Ç–ò–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b>' + '\n \n' +
                    `<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>`, {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: '–û—Ç–º–µ–Ω–∏—Ç—å'
                                }]
                            ]
                        }
                    }
                );
            }

            if (text === '/setNewCard') {
                setNewShopCardNumber.set(chatId.toString());

                return await shopBot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –¥–ª—è –ø—Ä–∏–π–æ–º—É –ø–ª–∞—Ç–µ–∂—ñ–≤' + '\n \n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É –∫–∞—Ä—Ç–∏ –≤ –±–æ—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫—É "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    });
            }

            if (text === '/setNewCookingCost') {
                setNewShopCookingCost.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –≤–∞—Ä—ñ–Ω–Ω—è –∑–∞ –∫—ñ–ª–æ–≥—Ä–∞–º —Ä–∞–∫—ñ–≤ –ß–ò–°–õ–û–ú' + '\n \n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ü—ñ–Ω–∏ –≤–∞—Ä—ñ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫—É "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    });
            }

            if (setNewShopCookingCost.has(chatId.toString())) {
                setNewShopCookingCost.delete(chatId.toString());

                if (text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏") {
                    return await shopBot.sendMessage(chatId, '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ü—ñ–Ω–∏ –≤–∞—Ä—ñ–Ω–Ω—è' + '\n \n' + shopBotAdminCommands)
                }

                const kilogramCost = await getCookingCostPerKiloFromDb(db);

                if (kilogramCost) {
                    try {
                        await db.run('UPDATE kilogram_cost SET number = ? WHERE id = ?', [Number(text.trim()), kilogramCost.id], function (err) {
                            if (err) {
                                return console.error(err.message);
                            }

                            console.log('language is updated');
                        });
                    } catch (e) {
                        throw new Error(e);
                    }
                } else {
                    try {
                        const sql = `
                            INSERT INTO kilogram_cost (
                                number
                            )
                            VALUES(?)
                        `;

                        await db.run(sql, [
                            text.trim()
                        ], function (err) {
                            if (err) {
                                return console.error(err.message);
                            }

                            console.log(`User with ID ${this.lastID} has been added to the database.`);
                        });
                    } catch (e) {
                        throw new Error(e);
                    }
                }

                return await shopBot.sendMessage(chatId, `<b>–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–º—ñ–Ω–∏–ª–∏ —Ü—ñ–Ω—É –≤–∞—Ä—ñ–Ω–Ω—è —Ä–∞–∫—ñ–≤, –Ω–æ–≤–∞ —Ü—ñ–Ω–∞ - ${text}</b>` + '\n \n' +
                    shopBotAdminCommands, {
                        reply_markup: {
                            remove_keyboard: true
                        },
                        parse_mode: "HTML"
                    }
                )
            }

            if (setNewShopCardNumber.has(chatId.toString())) {
                setNewShopCardNumber.delete(chatId.toString());

                if (text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏") {
                    return await shopBot.sendMessage(chatId, '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –∑–º—ñ–Ω—É –∫–∞—Ä—Ç–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤' + '\n \n' + shopBotAdminCommands)
                }

                const cardFromDb = await getCardFromDb(db);

                if (cardFromDb) {
                    try {
                        await db.run('UPDATE cards SET number = ? WHERE id = ?', [text.trim(), cardFromDb.id], function (err) {
                            if (err) {
                                return console.error(err.message);
                            }

                            console.log('language is updated');
                        });
                    } catch (e) {
                        throw new Error(e);
                    }
                } else {
                    try {
                        const sql = `
                            INSERT INTO cards (
                                number
                            )
                            VALUES(?)
                        `;

                        await db.run(sql, [
                            text.trim()
                        ], function (err) {
                            if (err) {
                                return console.error(err.message);
                            }

                            console.log(`User with ID ${this.lastID} has been added to the database.`);
                        });
                    } catch (e) {
                        throw new Error(e);
                    }
                }

                setNewShopCardHolderName.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–∞—Ä—Ç–∏</b>' + '\n \n' +
                    '<i>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –≤ –±–æ—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫—É "–ó–º—ñ–Ω–∏—Ç–∏"</i>', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: '–ó–º—ñ–Ω–∏—Ç–∏'
                                }]
                            ],
                        },
                        parse_mode: "HTML"
                    }
                )
            }

            if (setNewShopCardHolderName.has(chatId.toString())) {
                setNewShopCardHolderName.delete(chatId.toString());

                if (text === '–ó–º—ñ–Ω–∏—Ç–∏') {
                    setNewShopCardNumber.set(chatId.toString());

                    return await shopBot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –¥–ª—è –ø—Ä–∏–π–æ–º—É –ø–ª–∞—Ç–µ–∂—ñ–≤', {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
                }

                const cardFromDb = await getCardFromDb(db);

                console.log('found card: ', cardFromDb);

                if (!cardFromDb) {
                    try {
                        const sql = `
                            INSERT INTO cards (
                                holderName
                            )
                            VALUES(?)
                        `;

                        await db.run(sql, [
                            text.trim()
                        ], function (err) {
                            if (err) {
                                return console.error(err.message);
                            }

                            console.log(`User with ID ${this.lastID} has been added to the database.`);
                        });
                    } catch (e) {
                        throw new Error(e);
                    }
                } else {
                    try {
                        await db.run('UPDATE cards SET holderName = ? WHERE id = ?', [text.trim(), cardFromDb.id], function (err) {
                            if (err) {
                                return console.error(err.message);
                            }

                            console.log('language is updated');
                        });
                    } catch (e) {
                        throw new Error(e);
                    }
                }

                return await shopBot.sendMessage(chatId, '<b>–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ñ –¥–∞–Ω–Ω—ñ –¥–ª—è –ø—Ä–∏–π–æ–º—É –ø–ª–∞—Ç–µ–∂—ñ–≤</b>, –∞ —Å–∞–º–µ:' + '\n' +
                    `<code>${cardFromDb.number}</code>` + '\n' +
                    text + '\n\n' + shopBotAdminCommands, {
                        parse_mode: "HTML"
                    }
                )
            }

            if (shopBotCategoryToEditCostListener.has(chatId.toString())) {
                shopBotCategoryToEditCostListener.delete(chatId.toString());

                if (text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏") {
                    return await shopBot.sendMessage(chatId, '<b>–í–∏ –≤–∏–¥–º—ñ–Ω–∏–ª–∏ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫—Ä–∞–±—ñ–≤</b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
                }

                const category = await getShopBotCategoryFromDbByName(text, db);

                if (!category) {
                    const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                    if (!crabsCategoriesFromDB) {
                        return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                            parse_mode: "HTML"
                        })
                    }

                    const crabsList = crabsCategoriesFromDB.map((crab) => [{
                        text: crab.name
                    }]);

                    shopBotCategoryToEditCostListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                        '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    ...crabsList,
                                    [{
                                        text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                    }]
                                ]
                            }
                        }
                    )
                }

                shopBotCategoryToEditNewCostListener.set(chatId.toString(), category.id);

                return await shopBot.sendMessage(chatId, '–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó' + '\n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é".', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"
                                }]
                            ]
                        }
                    })
            }

            if (shopBotCategoryToEditCountListener.has(chatId.toString())) {
                shopBotCategoryToEditCountListener.delete(chatId.toString());

                if (text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏") {
                    return await shopBot.sendMessage(chatId, '<b>–í–∏ –≤–∏–¥–º—ñ–Ω–∏–ª–∏ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫—Ä–∞–±—ñ–≤</b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
                }

                const category = await getShopBotCategoryFromDbByName(text, db);

                if (!category) {
                    const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                    if (!crabsCategoriesFromDB) {
                        return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                            parse_mode: "HTML"
                        })
                    }

                    const crabsList = crabsCategoriesFromDB.map((crab) => [{
                        text: crab.name
                    }]);

                    shopBotCategoryToEditCountListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                        '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    ...crabsList,
                                    [{
                                        text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                    }]
                                ]
                            }
                        }
                    )
                }

                shopBotCategoryToEditNewCountListener.set(chatId.toString(), category.id);

                return await shopBot.sendMessage(chatId, '–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó' + '\n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é".', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"
                                }]
                            ]
                        }
                    })
            }

            if (shopBotCategoryToEditNewCountListener.has(chatId.toString())) {
                const categoryId = shopBotCategoryToEditNewCountListener.get(chatId.toString());
                shopBotCategoryToEditNewCountListener.delete(chatId.toString());

                if (text === "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é") {
                    const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                    if (!crabsCategoriesFromDB) {
                        return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                            parse_mode: "HTML"
                        })
                    }

                    const crabsList = crabsCategoriesFromDB.map((crab) => [{
                        text: crab.name
                    }]);

                    shopBotCategoryToEditCountListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                        '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    ...crabsList,
                                    [{
                                        text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                    }]
                                ]
                            }
                        }
                    )
                }

                console.log('categoryId: ', categoryId)

                try {
                    await db.run('UPDATE crabs_goods SET countPerKilo = ? WHERE id = ?', [Number(text), categoryId], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                return await shopBot.sendMessage(chatId.toString(), '–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–º—ñ–Ω–∏–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤.' + '\n' + shopBotAdminCommands, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                });
            }

            if (shopBotCategoryToEditNewCostListener.has(chatId.toString())) {
                const categoryId = shopBotCategoryToEditNewCostListener.get(chatId.toString());
                shopBotCategoryToEditNewCostListener.delete(chatId.toString());

                if (text === "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é") {
                    const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                    if (!crabsCategoriesFromDB) {
                        return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                            parse_mode: "HTML"
                        })
                    }

                    const crabsList = crabsCategoriesFromDB.map((crab) => [{
                        text: crab.name
                    }]);

                    shopBotCategoryToEditCostListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                        '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    ...crabsList,
                                    [{
                                        text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                    }]
                                ]
                            }
                        }
                    );
                }

                console.log('categoryId: ', categoryId)

                try {
                    await db.run('UPDATE crabs_goods SET costPerKilo = ? WHERE id = ?', [Number(text), categoryId], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                return await shopBot.sendMessage(chatId.toString(), '–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–º—ñ–Ω–∏–ª–∏ —Ü—ñ–Ω—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤.' + '\n' + shopBotAdminCommands, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                });
            }

            if (userToBlockChatIdListener.has(chatId.toString())) {
                userToBlockChatIdListener.delete(chatId.toString());

                if (text == '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    return await shopBot.sendMessage(chatId, '<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>' + '\n' + shopBotAdminCommands, {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true,
                        }
                    });
                }


                const userToBlock = await getShopBotUserOrNullByChatId(text, db);

                if (!userToBlock) {
                    return await shopBot.sendMessage(chatId, '<b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù!! –í–≤–µ–¥–∏—Ç–µ —á–∞—Ç–ò–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b>' + '\n \n' +
                        `<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>`, {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: '–û—Ç–º–µ–Ω–∏—Ç—å'
                                    }]
                                ]
                            }
                        }
                    );
                }

                try {
                    await db.run('UPDATE shop_users SET status = ? WHERE chatId = ?', [Number(userToBlock.isBlocked) ? 0 : 1, userToBlock.chatId], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                return await shopBot.sendMessage(chatId, `<b>–í—ã —É—Å–ø–µ—à–Ω–æ ${Number(userToBlock.isBlocked) ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>` + '\n' + shopBotAdminCommands, {
                    parse_mode: "HTML",
                    reply_markup: {
                        remove_keyboard: true,
                    }
                });
            }

            if (shopCategoryDeleteListener.has(chatId.toString())) {
                shopCategoryDeleteListener.delete(chatId.toString());

                if (text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏") {
                    return await shopBot.sendMessage(chatId, '<b>–í–∏ –≤–∏–¥–º—ñ–Ω–∏–ª–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫—Ä–∞–±—ñ–≤</b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
                }

                const category = await getShopBotCategoryFromDbByName(text, db);

                if (!category) {
                    const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                    if (!crabsCategoriesFromDB) {
                        return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                            parse_mode: "HTML"
                        })
                    }

                    const crabsList = crabsCategoriesFromDB.map((crab) => [{
                        text: crab.name
                    }]);

                    shopCategoryDeleteListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                        '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    ...crabsList,
                                    [{
                                        text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                    }]
                                ]
                            }
                        }
                    )
                }

                try {
                    await db.run('DELETE FROM crabs_goods WHERE id = ?', [category.id], async function (err) {
                        if (err) {
                            throw new Error(err);
                        }
                    });
                } catch (e) {
                    throw new Error(e);
                }

                return await shopBot.sendMessage(chatId, '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∫—Ä–∞–±—ñ–≤ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞', {
                    reply_markup: {
                        keyboard: shopBotMainMenuKeyboard
                    }
                })
            }

            if (shopBotCategoryToEditListener.has(chatId.toString())) {
                shopBotCategoryToEditListener.delete(chatId.toString());

                if (text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏") {
                    return await shopBot.sendMessage(chatId, '<b>–í–∏ –≤–∏–¥–º—ñ–Ω–∏–ª–∏ –∑–º—ñ–Ω—É –Ω–∞–∑–≤–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫—Ä–∞–±—ñ–≤</b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
                }

                const category = await getShopBotCategoryFromDbByName(text, db);

                if (!category) {
                    const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                    if (!crabsCategoriesFromDB) {
                        return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                            parse_mode: "HTML"
                        })
                    }

                    const crabsList = crabsCategoriesFromDB.map((crab) => [{
                        text: crab.name
                    }]);

                    shopBotCategoryToEditListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∞–∑–≤—É —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                        '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É –Ω–∞–∑–≤–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    ...crabsList,
                                    [{
                                        text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                    }]
                                ]
                            }
                        }
                    )
                }

                shopBotCategoryToEditNewNameListener.set(chatId.toString(), category.id);

                return await shopBot.sendMessage(chatId, '–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó' + '\n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏ "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é".', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"
                                }]
                            ]
                        }
                    })
            }

            if (shopBotCategoryToEditNewNameListener.has(chatId.toString())) {
                const categoryId = shopBotCategoryToEditNewNameListener.get(chatId.toString());
                shopBotCategoryToEditNewNameListener.delete(chatId.toString());

                if (text === "–û–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é") {
                    const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                    if (!crabsCategoriesFromDB) {
                        return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                            parse_mode: "HTML"
                        })
                    }

                    const crabsList = crabsCategoriesFromDB.map((crab) => [{
                        text: crab.name
                    }]);

                    shopCategoryDeleteListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∞–∑–≤—É —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ' + '\n \n' +
                        '<b>–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É –Ω–∞–∑–≤–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–∞–∫—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <code>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</code></b>', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    ...crabsList,
                                    [{
                                        text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                    }]
                                ]
                            }
                        }
                    );
                }

                try {
                    await db.run('UPDATE crabs_goods SET name = ? WHERE id = ?', [text, categoryId], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                return await shopBot.sendMessage(chatId.toString(), '–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–º—ñ–Ω–∏–ª–∏ –Ω–∞–∑–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.' + '\n' + shopBotAdminCommands, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                });
            }

            if (newShopBotCategoryNameListener.has(chatId.toString())) {
                newShopBotCategoryNameListener.delete(chatId.toString());

                if (text === '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    return await shopBot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.' + '\n' + shopBotAdminCommands);
                }

                const newCategoryId = await insertNewShopBotCategoryInDb(text, db);

                newShopBotCategoryCostPerKiloListener.set(chatId.toString(), newCategoryId);

                return await shopBot.sendMessage(chatId, '<b>–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ü—ñ–Ω—É —Ä–∞–∫—ñ–≤ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –∫—ñ–ª–æ–≥—Ä–∞–º *–ß–ò–°–õ–û–ú*!!</b>', {
                    parse_mode: "HTML",
                    reply_markup: {
                        remove_keyboard: true,
                    }
                });
            }

            if (newShopBotCategoryCostPerKiloListener.has(chatId.toString())) {
                const newCategoryId = newShopBotCategoryCostPerKiloListener.get(chatId.toString());
                newShopBotCategoryCostPerKiloListener.delete(chatId.toString());

                try {
                    await db.run('UPDATE crabs_goods SET costPerKilo = ? WHERE id = ?', [Number(text), newCategoryId], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                newShopBotCategoryCountPerKiloListener.set(chatId.toString(), newCategoryId);

                return await shopBot.sendMessage(chatId, '<b>–ù–∞–ø–∏—à—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–∏—Å–∞—Ç–∏ —á–∏—Å–ª–æ–º!!</b>' + '\n \n' +
                    '–©–æ–± –∑–∞–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É –∑–∞ –∫—ñ–ª–æ–≥—Ä–∞–º —Ä–∞–∫—ñ–≤ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ó–º—ñ–Ω–∏—Ç–∏"', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–ó–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    });
            }

            if (newShopBotCategoryCountPerKiloListener.has(chatId.toString())) {
                const newCategoryId = newShopBotCategoryCountPerKiloListener.get(chatId.toString());
                newShopBotCategoryCountPerKiloListener.delete(chatId.toString());

                if (text === "–ó–º—ñ–Ω–∏—Ç–∏") {
                    newShopBotCategoryCostPerKiloListener.set(chatId.toString(), newCategoryId);

                    return await shopBot.sendMessage(chatId, '<b>–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ü—ñ–Ω—É —Ä–∞–∫—ñ–≤ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –∫—ñ–ª–æ–≥—Ä–∞–º *–ß–ò–°–õ–û–ú*!!</b>', {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true,
                        }
                    });
                } else if (isNaN(text)) {
                    newShopBotCategoryCountPerKiloListener.set(chatId.toString(), newCategoryId);

                    return await shopBot.sendMessage(chatId, '<b><u>–í–ò –í–í–ï–õ–ò –ß–ò–°–õ–û –í –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ú–£ –§–û–†–ú–ê–¢–Ü!!!</u></b>' + '\n' + '<b>–ù–∞–ø–∏—à—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∫—ñ–≤ –Ω–∞ –∫—ñ–ª–æ–≥—Ä–∞–º —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–∏—Å–∞—Ç–∏ —á–∏—Å–ª–æ–º!!</b>' + '\n \n' +
                        '–©–æ–± –∑–∞–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É –∑–∞ –∫—ñ–ª–æ–≥—Ä–∞–º —Ä–∞–∫—ñ–≤ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ó–º—ñ–Ω–∏—Ç–∏"', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: "–ó–º—ñ–Ω–∏—Ç–∏"
                                    }]
                                ]
                            }
                        });
                }

                try {
                    await db.run('UPDATE crabs_goods SET countPerKilo = ? WHERE id = ?', [Number(text), newCategoryId], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                return await shopBot.sendMessage(chatId, '<b>–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤ –±–æ—Ç!</b>' + '\n \n' +
                    shopBotAdminCommands, {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
            }

            if (messageForAllShopBotUsers.has(chatId.toString())) {
                messageForAllShopBotUsers.delete(chatId.toString());

                if (text === "–û—Ç–º–µ–Ω–∏—Ç—å") {
                    return await shopBot.sendMessage(chatId, '<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>', {
                        parse_mode: "HTML"
                    });
                }

                const userIds = await getShopBotUsersChatIds(db);

                console.log(userIds);

                for (const userId of userIds) {
                    try {
                        await shopBot.copyMessage(userId, chatId, msg.message_id);
                    } catch (error) {
                        if (error.response && error.response.body && error.response.body.error_code === 403) {
                            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);

                            db.run('DELETE FROM shop_users WHERE chatId = ?', [userId], (err) => {
                                if (err) {
                                    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err.message);
                                } else {
                                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`);
                                }
                            });
                        }
                    }
                }

                return await shopBot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' + '\n' + shopBotAdminCommands, {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: shopBotMainMenuKeyboard
                    }
                })
            }
        }

        switch (text) {
            case 'xG7hJm2uNs5kL8oQ': {
                await giveShopUserAdminStatus(chatId.toString(), db);

                return await shopBot.sendMessage(chatId, '–í—ñ—Ç–∞—é, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ—ó –ø–∞–Ω–µ–ª—ñ –±–æ—Ç–∞' + shopBotAdminCommands);
            }

            case '–¶—ñ–Ω–∏ / –ü—Ä–∞–π—Å': {
                const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                if (!crabsCategoriesFromDB) {
                    return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                        parse_mode: "HTML"
                    })
                }

                const crabsList = crabsCategoriesFromDB.map((crab) => (`ü¶û <b>${crab.name}</b> <i>${crab.costPerKilo}</i> –≥—Ä–Ω/–∫–≥`)).join('\n');

                console.log(crabsList);

                return await shopBot.sendMessage(chatId, '<b>–¶—ñ–Ω–∏ / –ü—Ä–∞–π—Å</b>' + '\n \n' +
                    crabsList, {
                        parse_mode: "HTML"
                    });
            }

            case '–†–æ–∑–º—ñ—Ä–∏': {
                const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                if (!crabsCategoriesFromDB) {
                    return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                        parse_mode: "HTML"
                    })
                }

                const crabsList = crabsCategoriesFromDB.map((crab) => (`ü¶û <b>${crab.name}</b> - <i>${crab.countPerKilo}</i> —à—Ç/–∫–≥`)).join('\n');

                console.log(crabsList);

                return await shopBot.sendMessage(chatId, '<b>–†–æ–∑–º—ñ—Ä–∏ —Ä–∞–∫—ñ–≤</b>' + '\n \n' +
                    crabsList, {
                        parse_mode: "HTML"
                    });
            }

            case '–ú–µ—Ç–æ–¥–∏ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è': {
                const kilogramCost = await getCookingCostPerKiloFromDb(db);

                if (!kilogramCost) {
                    return await shopBot.sendMessage(chatId, '<b>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞! –¶—ñ–Ω–∞ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–∞–∑–Ω–∞—á–µ–Ω–∞. </b>' + '\n \n' +
                        '‚Ä¢ <i>–∫–ª–∞—Å–∏—á–Ω–µ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è</i> ü•ó' + '\n' +
                        '‚Ä¢ <i>—Å–º–∞–∂–µ–Ω–Ω—è —É –º–µ–¥–æ–≤–æ–º—É —Å–æ—É—Å—ñ</i> üêù' + '\n' +
                        '‚Ä¢ <i>—Å–º–∞–∂–µ–Ω–Ω—è –ø–æ-—Ç–∞–π—Å—å–∫–∏</i> üçù' + '\n' +
                        '‚Ä¢ <i>—Å–º–∞–∂–µ–Ω–Ω—è —É –≤–µ—Ä—à–∫–æ–≤–æ–º—É —Å–æ—É—Å—ñ</i> ü•õ' + '\n' +
                        '‚Ä¢ <i>—Å–º–∞–∂–µ–Ω–Ω—è —É —Å–æ—É—Å—ñ —Ç–æ–º-—è–º</i> üå∂Ô∏è' + '\n' +
                        '‚Ä¢ <i>–≤–∞—Ä–µ–Ω—ñ –ø–æ-–∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏</i> üçª' + '\n', {
                            parse_mode: "HTML"
                        });
                }

                return await shopBot.sendMessage(chatId, '<b>–ú–µ—Ç–æ–¥–∏ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:</b>' + '\n \n' +
                    `–¶—ñ–Ω–∞ –≤–∞—Ä–∫–∏ <b><u>${kilogramCost.number}</u> –≥—Ä–Ω/–∫–≥</b>:` + '\n \n' +
                    '‚Ä¢ <i>–∫–ª–∞—Å–∏—á–Ω–µ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è</i> ü•ó' + '\n' +
                    '‚Ä¢ <i>—Å–º–∞–∂–µ–Ω–Ω—è —É –º–µ–¥–æ–≤–æ–º—É —Å–æ—É—Å—ñ</i> üêù' + '\n' +
                    '‚Ä¢ <i>—Å–º–∞–∂–µ–Ω–Ω—è –ø–æ-—Ç–∞–π—Å—å–∫–∏</i> üçù' + '\n' +
                    '‚Ä¢ <i>—Å–º–∞–∂–µ–Ω–Ω—è —É –≤–µ—Ä—à–∫–æ–≤–æ–º—É —Å–æ—É—Å—ñ</i> ü•õ' + '\n' +
                    '‚Ä¢ <i>—Å–º–∞–∂–µ–Ω–Ω—è —É —Å–æ—É—Å—ñ —Ç–æ–º-—è–º</i> üå∂Ô∏è' + '\n' +
                    '‚Ä¢ <i>–≤–∞—Ä–µ–Ω—ñ –ø–æ-–∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏</i> üçª' + '\n', {
                        parse_mode: "HTML"
                    });
            }

            case "–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è": {
                return await shopBot.sendMessage(chatId, '<b>–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É:</b>' + '\n \n' +
                    `<a href="${googleMapsLocation}">–≤—É–ª. –°—Ç–µ–ø–∞–Ω–∞ –ë–∞–Ω–¥–µ—Ä–∏ 30, –º—ñ—Å—Ç–æ –ë—Ä–æ–≤–∞—Ä–∏, –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å</a>`, {
                        parse_mode: "HTML",
                        disable_web_page_preview: true
                    });
            }

            case '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ': {
                return await shopBot.sendMessage(chatId, '<b>–ù–∞—à—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:</b>' + '\n \n' +
                    `<a href="${shopTikTokLink}">Tik tok</a>`, {
                        parse_mode: "HTML",
                        disable_web_page_preview: true
                    });
            }

            case "–ó–∞–º–æ–≤–∏—Ç–∏": {
                orderReceiverNameListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</b>' + '\n \n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    })
            }
        }

        if (orderReceiverNameListener.has(chatId.toString())) {
            orderReceiverNameListener.delete(chatId.toString());

            if (text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏") {
                return await shopBot.sendMessage(chatId, '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–∫—ñ–≤, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é', {
                    reply_markup: {
                        keyboard: shopBotMainMenuKeyboard
                    }
                })
            }

            orderReceiverName.set(chatId.toString(), text.trim());
            orderReceiverPhoneNumberListener.set(chatId.toString(), 'true');

            return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</b>' + '\n \n' +
                '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–ó–º—ñ–Ω–∏—Ç–∏"
                            }]
                        ]
                    }
                })
        }

        if (orderReceiverPhoneNumberListener.has(chatId.toString())) {
            orderReceiverPhoneNumberListener.delete(chatId.toString());

            if (text === "–ó–º—ñ–Ω–∏—Ç–∏") {
                orderReceiverNameListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</b>' + '\n \n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    })
            }

            orderReceiverPhoneNumber.set(chatId.toString(), text.trim());
            orderReceiverCityListener.set(chatId.toString(), 'true');

            return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</b>' + '\n \n' +
                '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–ó–º—ñ–Ω–∏—Ç–∏"
                            }]
                        ]
                    }
                })
        }

        if (orderReceiverCityListener.has(chatId.toString())) {
            orderReceiverCityListener.delete(chatId.toString());

            if (text === "–ó–º—ñ–Ω–∏—Ç–∏") {
                orderReceiverPhoneNumberListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</b>' + '\n \n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–ó–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    })
            }

            orderReceiverCity.set(chatId.toString(), text.trim());
            orderReceiverDeliveryInfoListener.set(chatId.toString(), 'true');

            return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ –æ–¥–Ω–∏–º –∑ –¥–≤—É—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:</b>' + '\n' +
                '1. <i>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—à—Ç–æ—é: –í–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è, —Ç–∞ –∞–¥—Ä–µ—Å—É –ø–æ—à—Ç–∏</i>' + '\n' +
                '2. <i>–ö—É—Ä\'—î—Ä—Å—å–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—î–≤—É —Ç–∞ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ: –í–∫–∞–∑–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –º—ñ—Å—Ü—è –¥–æ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏</i>' + '\n \n' +
                '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ/–Ω–∞—Å–µ–ª–µ–Ω–∏–π –æ—Ç—Ä–∏–º—É–≤–∞—á–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–ó–º—ñ–Ω–∏—Ç–∏"
                            }]
                        ]
                    }
                })
        }

        if (orderReceiverDeliveryInfoListener.has(chatId.toString())) {
            orderReceiverDeliveryInfoListener.delete(chatId.toString());

            if (text === "–ó–º—ñ–Ω–∏—Ç–∏") {
                orderReceiverCityListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</b>' + '\n \n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–ó–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        },
                        parse_mode: "HTML"
                    })
            }

            orderReceiverDeliveryInfo.set(chatId.toString(), text.trim());
            orderCategoryListener.set(chatId.toString(), 'true');

            const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

            if (!crabsCategoriesFromDB) {
                return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                    parse_mode: "HTML"
                })
            }

            const crabsList = crabsCategoriesFromDB.map((crab) => [{
                text: crab.name
            }]);

            return await shopBot.sendMessage(chatId, '<b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —Ä–∞–∫—ñ–≤ —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏</b>' + '\n \n' +
                '–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: [
                            ...crabsList,
                            [{
                                text: "–ó–º—ñ–Ω–∏—Ç–∏"
                            }]
                        ]
                    }
                })
        }

        if (orderCategoryListener.has(chatId.toString())) {
            orderCategoryListener.delete(chatId.toString());

            if (text === "–ó–º—ñ–Ω–∏—Ç–∏") {
                orderReceiverDeliveryInfoListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ –æ–¥–Ω–∏–º –∑ –¥–≤—É—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:</b>' + '\n' +
                    '1. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—à—Ç–æ—é: –í–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è, —Ç–∞ –∞–¥—Ä–µ—Å—É –ø–æ—à—Ç–∏' + '\n' +
                    '2. –ö—É—Ä\'—î—Ä—Å—å–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—î–≤—É —Ç–∞ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ: –í–∫–∞–∑–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –º—ñ—Å—Ü—è –¥–æ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏' + '\n \n' +
                    '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ/–Ω–∞—Å–µ–ª–µ–Ω–∏–π –æ—Ç—Ä–∏–º—É–≤–∞—á–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–ó–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    })
            }

            const category = await getShopBotCategoryFromDbByName(text, db);

            if (!category) {
                const crabsCategoriesFromDB = await getAllCrabsGoodsFromDb(db);

                if (!crabsCategoriesFromDB) {
                    return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç—ñ –Ω–µ–º–∞—î —Ä–∞–∫—ñ–≤</b>', {
                        parse_mode: "HTML"
                    })
                }

                const crabsList = crabsCategoriesFromDB.map((crab) => [{
                    text: crab.name
                }]);

                shopBotCategoryToEditCostListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —Ä–∞–∫—ñ–≤ —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏</b>' + '\n \n' +
                    '–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                        reply_markup: {
                            keyboard: [
                                ...crabsList,
                                [{
                                    text: "–ó–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    })
            }

            orderCategory.set(chatId.toString(), text);
            orderWeightListener.set(chatId.toString(), 'true');

            return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–º —Å–∫—ñ–ª—å–∫–∏ –∫—ñ–ª–æ–≥—Ä–∞–º—ñ–≤ —Ä–∞–∫—ñ–≤ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏</b>' + '\n \n' +
                '–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ä–∞–∫—ñ–≤, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–ó–º—ñ–Ω–∏—Ç–∏"
                            }]
                        ]
                    }
                })
        }

        if (orderWeightListener.has(chatId.toString())) {
            orderWeightListener.delete(chatId.toString());

            if (text === "–ó–º—ñ–Ω–∏—Ç–∏") {
                orderCategoryListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —Ä–∞–∫—ñ–≤ —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏</b>' + '\n \n' +
                    '–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                        reply_markup: {
                            keyboard: [
                                ...crabsList,
                                [{
                                    text: "–ó–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        },
                        parse_mode: "HTML"
                    })
            }

            orderIsCookedListener.set(chatId.toString(), 'true');
            orderWeight.set(chatId.toString(), text);

            return await shopBot.sendMessage(chatId, '<b>–ë–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –≤–∞—Ä–µ–Ω—ñ —á–∏ –∂–∏–≤—ñ —Ä–∞–∫–∏?</b>' + '\n \n' +
                '–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ä–∞–∫—ñ–≤, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–í–∞—Ä–µ–Ω—ñ"
                            }, {
                                text: '–ñ–∏–≤—ñ'
                            }],
                            [{
                                text: "–ó–º—ñ–Ω–∏—Ç–∏"
                            }]
                        ]
                    }
                })
        }

        if (orderIsCookedListener.has(chatId.toString())) {
            const kilogramCost = await getCookingCostPerKiloFromDb(db);
            orderIsCookedListener.delete(chatId.toString());

            if (text === "–ó–º—ñ–Ω–∏—Ç–∏") {
                orderWeightListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–º —Å–∫—ñ–ª—å–∫–∏ –∫—ñ–ª–æ–≥—Ä–∞–º—ñ–≤ —Ä–∞–∫—ñ–≤ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏</b>' + '\n \n' +
                    '–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ä–∞–∫—ñ–≤, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "–ó–º—ñ–Ω–∏—Ç–∏"', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–ó–º—ñ–Ω–∏—Ç–∏"
                                }]
                            ]
                        }
                    })
            }

            if (text === '–ñ–∏–≤—ñ') {
                const category = await getShopBotCategoryFromDbByName(orderCategory.get(chatId.toString()), db);

                const orderWeightInKilos = orderWeight.get(chatId.toString());
                const costPerKilo = category.costPerKilo;

                console.log('orderWeightInKilos: ', orderWeightInKilos);
                console.log('costPerKilo: ', costPerKilo);
                console.log('costPerKilo: ', costPerKilo);
                console.log('kilogramCost: ', kilogramCost.number);


                const card = await getCardFromDb(db);

                console.log(card);

                const finalCost = Number(orderWeightInKilos) * Number(costPerKilo);

                orderIsCooked.set(chatId.toString(), text);
                documentReceiptListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏</b>:' + '\n \n' +
                    `<code>${card.number}</code> (–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏)` + '\n' +
                    `<i>${card.holderName}</i>` + '\n \n' +
                    `–°—É–º–∞: <b><i>${finalCost}</i></b> –≥—Ä–Ω` + '\n \n' +
                    '–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –≤ —á–∞—Ç', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: shopBotMainMenuKeyboard
                        }
                    })
            }

            orderCookingTypeListener.set(chatId.toString());
            orderIsCooked.set(chatId.toString(), text);

            return await shopBot.sendMessage(chatId, '<b>–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —Ä–∞–∫—ñ–≤ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –Ω–∏–∂—á–µ</b>' + '\n \n' +
                '<i>–Ø–∫—â–æ –≤–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ —ñ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –∂–∏–≤–∏—Ö —Ä–∞–∫—ñ–≤, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–•–æ—á—É –∑–∞–º–æ–≤–∏—Ç–∏ –∂–∏–≤–∏—Ö —Ä–∞–∫—ñ–≤"</i>', {
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–ö–ª–∞—Å–∏—á–Ω–µ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è ü•ó"
                            }, {
                                text: '–°–º–∞–∂–µ–Ω–Ω—è —É –º–µ–¥–æ–≤–æ–º—É —Å–æ—É—Å—ñ üêù'
                            }],
                            [{
                                text: "–°–º–∞–∂–µ–Ω–Ω—è –ø–æ-—Ç–∞–π—Å—å–∫–∏ üçù"
                            }, {
                                text: '–°–º–∞–∂–µ–Ω–Ω—è —É –≤–µ—Ä—à–∫–æ–≤–æ–º—É —Å–æ—É—Å—ñ ü•õ'
                            }],
                            [{
                                text: "–°–º–∞–∂–µ–Ω–Ω—è —É —Å–æ—É—Å—ñ —Ç–æ–º-—è–º üå∂Ô∏è"
                            }, {
                                text: '–í–∞—Ä–µ–Ω—ñ –ø–æ-–∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏ üçª'
                            }],
                            [{
                                text: "–•–æ—á—É –∑–∞–º–æ–≤–∏—Ç–∏ –∂–∏–≤–∏—Ö —Ä–∞–∫—ñ–≤"
                            }]
                        ]
                    },
                    parse_mode: "HTML"
                }
            )
        }

        if (orderCookingTypeListener.has(chatId.toString())) {
            const kilogramCost = await getCookingCostPerKiloFromDb(db);
            orderCookingTypeListener.delete(chatId.toString());

            const category = await getShopBotCategoryFromDbByName(orderCategory.get(chatId.toString()), db);

            const orderWeightInKilos = orderWeight.get(chatId.toString());
            const costPerKilo = category.costPerKilo;

            console.log('orderWeightInKilos: ', orderWeightInKilos);
            console.log('costPerKilo: ', costPerKilo);
            console.log('costPerKilo: ', costPerKilo);
            console.log('kilogramCost: ', kilogramCost.number);


            const card = await getCardFromDb(db);

            console.log('card: ', card)

            if (text === "–•–æ—á—É –∑–∞–º–æ–≤–∏—Ç–∏ –∂–∏–≤–∏—Ö —Ä–∞–∫—ñ–≤") {
                const finalCost = Number(orderWeightInKilos) * Number(costPerKilo);

                orderIsCooked.set(chatId.toString(), text);
                documentReceiptListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏</b>:' + '\n \n' +
                    `<code>${card.number}</code> (–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏)` + '\n' +
                    `<i>${card.holderName}</i>` + '\n \n' +
                    `–°—É–º–∞: <b><i>${finalCost}</i></b> –≥—Ä–Ω` + '\n \n' +
                    '–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –≤ —á–∞—Ç', {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: shopBotMainMenuKeyboard
                        }
                    })
            }

            const finalCost = text !== "–•–æ—á—É –∑–∞–º–æ–≤–∏—Ç–∏ –∂–∏–≤–∏—Ö —Ä–∞–∫—ñ–≤" ? Number(orderWeightInKilos) * Number(costPerKilo) + Number(orderWeightInKilos) * Number(kilogramCost.number) : Number(orderWeightInKilos) * Number(costPerKilo);

            orderCookingType.set(chatId.toString(), text !== "–•–æ—á—É –∑–∞–º–æ–≤–∏—Ç–∏ –∂–∏–≤–∏—Ö —Ä–∞–∫—ñ–≤" ? text : '');
            documentReceiptListener.set(chatId.toString(), 'true');

            return await shopBot.sendMessage(chatId, '<b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏</b>:' + '\n \n' +
                `<code>${card.number}</code> (–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏)` + '\n' +
                `<i>${card.holderName}</i>` + '\n \n' +
                `–°—É–º–∞: <b><i>${finalCost}</i></b> –≥—Ä–Ω` + '\n \n' +
                '–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –≤ —á–∞—Ç', {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: shopBotMainMenuKeyboard
                    }
                })
        }
    })
}