import {
    channelChatId
} from "../config.js";
import getShopBotCategoryFromDbById from "../middlewares/getShopBotCategoryFromDbById.js";
import getShopCategoryGoodsFromDb from "../middlewares/getShopCategoryGoodsFromDb.js";
import getShopBotUserOrNullByChatId from "../middlewares/getShopBotUserOrNullByChatId.js";
import {
    shopBotMainMenuKeyboard
} from "../utils/keyboards.js";
import CryptoBotAPI from 'crypto-bot-api';
import fs from 'fs';
import shopBot from "../utils/shopBot.js";
import getAllShopCategoriesFromDb from "../middlewares/getAllShopCategoriesFromDb.js";
import getShopBotGoodFromDbById from "../middlewares/getShopBotGoodFromDbById.js";
import getShopBotAdminsFromDb from "../middlewares/getShopBotAdminsFromDb.js";
import getAllShopBotGoodsFromDb from "../middlewares/getAllShopBotGoodsFromDb.js";


const CryptoBotClient = new CryptoBotAPI('255970:AAICw6YxXC7rUHjDyEIK8dODCXLOEs61Ch9');

export default async function handleShopBotCallbackQuery(db) {
    shopBot.on('callback_query', async (query) => {
        const queryId = query.id;
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;
        const foundUserOrNull = await getShopBotUserOrNullByChatId(chatId.toString(), db);

        if (query.data === 'soldOut') {
            return await shopBot.answerCallbackQuery(queryId, {
                text: '–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è!',
                show_alert: true,
            });
        }

        if (query.data === 'no_goods') {
            return await shopBot.answerCallbackQuery(queryId, {
                text: '–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç—É —Ç–æ–≤–∞—Ä–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –∞–¥–º–∏–Ω –∏—Ö –¥–æ–±–∞–≤–∏—Ç',
                show_alert: true,
            });
        }

        if (query.data.includes('choose__lang')) {
            await shopBot.answerCallbackQuery(queryId);
            const language = query.data.split('--')[1];
            if (!foundUserOrNull) {
                const userFirstName = query.from.first_name;
                const username = query.from.username ? query.from.username : 'NO USERNAME';

                await shopBot.editMessageText("*You have successfully chosen lang*", {
                    inline_keyboard: [],
                    parse_mode: "Markdown",
                    chat_id: chatId,
                    message_id: messageId,
                });

                await shopBot.sendMessage(chatId, await selectMenuItemText(language), {
                    reply_markup: {
                        keyboard: await userMenuKeyboard(language),
                    }
                })
            } else {
                await changeUserLanguage(db, chatId, language);

                await shopBot.editMessageText(await userProfileText(foundUserOrNull.firstName, foundUserOrNull.username, foundUserOrNull.AEDamount, foundUserOrNull.hash, foundUserOrNull.minerLVL, foundUserOrNull.refferals, language), {
                    reply_markup: {
                        inline_keyboard: [
                            language === 'english' ? [{
                                text: 'ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© üá¶üá™',
                                callback_data: 'choose__lang--arabic'
                            }] : [{
                                text: "English üá¨üáß",
                                callback_data: 'choose__lang--english'
                            }]
                        ]
                    },
                    chat_id: chatId,
                    message_id: messageId,
                });

                await shopBot.sendMessage(chatId, await selectMenuItemText(language), {
                    reply_markup: {
                        keyboard: await userMenuKeyboard(language),
                    }
                })
            }
        }

        if (query.data === 'check_subscription') {
            const chatMembership = await shopBot.getChatMember(channelChatId, chatId);

            console.log(chatMembership);

            if (chatMembership.status !== 'left') {
                try {
                    db.run('UPDATE shop_users SET isSubscribed = ? WHERE chatId = ?', [
                        1,
                        chatId.toString(),
                    ], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log(`Email adress was updated`);
                    });
                } catch (e) {
                    throw new Error(e);
                }

                await shopBot.answerCallbackQuery(queryId, {
                    text: '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª',
                    show_alert: true,
                });

                await shopBot.editMessageText('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª', {
                    reply_markup: {
                        inline_keyboard: []
                    },
                    chat_id: chatId,
                    message_id: messageId
                });

                const goodsKeyboard = [];

                const goodsFromDb = await getAllShopCategoriesFromDb(db);

                console.log(goodsFromDb);

                if (goodsFromDb) {
                    for (const good of goodsFromDb) {
                        goodsKeyboard.push([{
                            text: good.name,
                            callback_data: `selectCategory_${good.id}`
                        }]);
                    }
                } else {
                    goodsKeyboard.push([{
                        text: '–í –±–æ—Ç–µ –Ω–µ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                        callback_data: `no_categories`,
                    }]);
                }

                await shopBot.sendPhoto(chatId, './images/shop_info.jpg', {
                    parse_mode: "HTML",
                    caption: '‚ö°Ô∏è <b>–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –•–∞—Ä–¥–∫–æ—Ä–∞</b>.' + '\n' +
                        '‚îó <i>–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π:</i>',
                    reply_markup: {
                        keyboard: shopBotMainMenuKeyboard
                    }
                });

                return await shopBot.sendAnimation(chatId, './images/shop_goods-video.MP4', {
                    parse_mode: "HTML",
                    caption: '<b>–¢–æ–≤–∞—Ä—ã –æ—Ç –•–∞—Ä–¥–∞</b> üì¶' + '\n' +
                        '<u>–¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</u> ‚úÖ',
                    reply_markup: {
                        inline_keyboard: goodsKeyboard
                    }
                });

            }

            await shopBot.answerCallbackQuery(queryId, {
                text: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                show_alert: true,
            });

        }

        if (query.data.includes('selectCategory')) {
            const categoryId = query.data.split('_')[1];
            const category = await getShopBotCategoryFromDbById(categoryId, db);

            if (category) {
                const categoryGoods = await getShopCategoryGoodsFromDb(categoryId, db);

                const goodsKeyboard = []

                if (categoryGoods) {
                    console.log(categoryGoods);
                    for (const good of categoryGoods) {
                        goodsKeyboard.push([{
                            text: good.soldOut ? good.name + '‚ùå–†–∞—Å–ø—Ä–æ–¥–∞–Ω–æ‚ùå' : `${good.name}`,
                            callback_data: good.soldOut ? 'soldOut' : `selectGood_${good.id}`
                        }])
                    }
                } else {
                    goodsKeyboard.push([{
                        text: '–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç—É —Ç–æ–≤–∞—Ä–æ–≤',
                        callback_data: 'no_goods'
                    }])
                }

                await shopBot.deleteMessage(chatId, messageId);

                return await shopBot.sendPhoto(chatId, `./images/${categoryId}__photo.jpg`, {
                    caption: category.subscription,
                    reply_markup: {
                        inline_keyboard: [
                            ...goodsKeyboard,
                            [{
                                text: '–ù–∞–∑–∞–¥ üîô',
                                callback_data: `backToGoods`
                            }]
                        ]
                    }
                })
            }
        }

        if (query.data.includes('selectGood')) {
            const goodId = query.data.split('_')[1];

            const good = await getShopBotGoodFromDbById(goodId, db);

            if (good) {
                await shopBot.deleteMessage(chatId, messageId);

                return await shopBot.sendMessage(chatId, `<b>${good.name}</b>` + '\n' +
                    `<b>–¶–µ–Ω–∞: ${good.cost} $</b>` + '\n \n' +
                    good.description, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: 'üí≥ Pay with CryptoBot',
                                    callback_data: `payWithCryptoBot_${goodId}`
                                }],
                                [{
                                    text: 'üí≥ Pay with balance',
                                    callback_data: `payWithBalance_${goodId}`
                                }],
                                [{
                                    text: '–ù–∞–∑–∞–¥ üîô',
                                    callback_data: `selectCategory_${good.categoryId}`
                                }]
                            ]
                        }
                    })
            }
        }

        if (query.data.includes('payWithBalance')) {
            const goodId = query.data.split('_')[1];

            const good = await getShopBotGoodFromDbById(goodId, db);

            if (good) {
                if (Number(good.cost) > Number(foundUserOrNull.balance)) {
                    return await shopBot.answerCallbackQuery(queryId, {
                        text: '–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
                        show_alert: true,
                    });
                }
                const adminsArr = await getShopBotAdminsFromDb(db);

                try {
                    await db.run('UPDATE shop_users SET balance = ? WHERE chatId = ?', [Number(foundUserOrNull.balance) - Number(good.cost), chatId.toString()], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                for (const admin of adminsArr) {
                    await shopBot.sendMessage(admin.chatId, `üí∏ <b>–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞.</b>` + '\n' +
                        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${good.name}, –¶–µ–Ω–∞: ${good.cost} USDT` + '\n \n' +
                        `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${query.from.first_name}. Username: ${query.from.username ? `@${query.from.username}` : '<code>–ù–ï–¢–£ –Æ–ó–ï–†–ù–ï–ô–ú–ê</code>'}, ChatId <code>${chatId}</code>`, {
                            parse_mode: "HTML"
                        }
                    );
                }

                return await shopBot.editMessageText('üí∏ <b>–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>.' + "\n" +
                    'ü•∞ <b><i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.</i></b>' + '\n \n' +
                    '<i>–û–±—ã—á–Ω–æ –æ—Ç–≤–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç 5-10 –º–∏–Ω—É—Ç.</i>üîπ', {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: "HTML",
                        reply_markup: {
                            inline_keyboard: []
                        }
                    }
                );
            }
        }

        if (query.data.includes('payWithCryptoBot')) {
            const goodId = query.data.split('_')[1];
            const good = await getShopBotGoodFromDbById(goodId, db);
            if (!good) {
                return await shopBot.editMessageText('–î–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –Ω–µ—Ç—É –≤ –±–æ—Ç–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é', {
                    chat_id: chatId,
                    message_id: messageId
                })
            }

            const newInvoice = await CryptoBotClient.createInvoice({
                amount: good.cost,
                currency: "USDT"
            });

            console.log(newInvoice);

            return await shopBot.editMessageText('‚úÖ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É CryptoBot —Å–æ–∑–¥–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ "<b>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</b>" –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä.' + '\n \n' +
                `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>${good.cost} USDT</b>` + '\n \n' +
                '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –ø–µ—Ä–µ–¥–∞—Å—Ç –≤–∞—à –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–≤–∞—Ä.', {
                    parse_mode: "HTML",
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                                url: newInvoice.payUrl
                            }],
                            [{
                                text: '‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                callback_data: `checkCryptoBotPayment_${goodId}_${newInvoice.id}`
                            }],
                            [{
                                text: '–ù–∞–∑–∞–¥ üîô',
                                callback_data: `selectGood_${goodId}`
                            }]
                        ]
                    }
                });
        }

        if (query.data.includes('checkCryptoBotPayment')) {
            const goodId = query.data.split('_')[1];
            const invoiceId = query.data.split('_')[2];

            const newInvoice = await CryptoBotClient.getInvoices({
                asset: "USDT",
                invoice_ids: [invoiceId],
                count: 1
            });

            if (newInvoice.items[0].status === 'active') {
                return await shopBot.answerCallbackQuery(queryId, {
                    text: '–í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä! –û–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
                    show_alert: true,
                });
            }

            const good = await getShopBotGoodFromDbById(goodId, db);

            const adminsArr = await getShopBotAdminsFromDb(db);

            if (foundUserOrNull.refferal_id) {
                const refferalUser = await getShopBotUserOrNullByChatId(foundUserOrNull.refferal_id.toString(), db);

                if (refferalUser) {
                    try {
                        await db.run('UPDATE shop_users SET balance = ? WHERE chatId = ?', [refferalUser.balance + (Number(good.cost) * 0.1), foundUserOrNull.refferal_id.toString()], function (err) {
                            if (err) {
                                return console.error(err.message);
                            }

                            console.log('language is updated');
                        });

                        await db.run('UPDATE shop_users SET totalEarned = ? WHERE chatId = ?', [refferalUser.balance + (Number(good.cost) * 0.1), foundUserOrNull.refferal_id.toString()], function (err) {
                            if (err) {
                                return console.error(err.message);
                            }

                            console.log('language is updated');
                        });
                    } catch (e) {
                        throw new Error(e);
                    }
                }
            }

            for (const admin of adminsArr) {
                await shopBot.sendMessage(admin.chatId, `üí∏ <b>–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞.</b>` + '\n' +
                    `–ù–∞–∑–≤–∞–Ω–∏–µ: ${good.name}, –¶–µ–Ω–∞: ${good.cost} USDT` + '\n \n' +
                    `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${query.from.first_name}. Username: ${query.from.username ? `@${query.from.username}` : '<code>–ù–ï–¢–£ –Æ–ó–ï–†–ù–ï–ô–ú–ê</code>'}, ChatId <code>${chatId}</code>`, {
                        parse_mode: "HTML"
                    }
                );
            }

            return await shopBot.editMessageText('üí∏ <b>–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>.' + "\n" +
                'ü•∞ <b><i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.</i></b>' + '\n \n' +
                '<i>–û–±—ã—á–Ω–æ –æ—Ç–≤–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç 5-10 –º–∏–Ω—É—Ç.</i>üîπ', {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: []
                    }
                }
            );
        }

        if (query.data === 'backToGoods') {
            const goodsKeyboard = [];

            const goodsFromDb = await getAllShopCategoriesFromDb(db);

            console.log(goodsFromDb);

            if (goodsFromDb) {
                for (const good of goodsFromDb) {
                    goodsKeyboard.push([{
                        text: good.name,
                        callback_data: `selectCategory_${good.id}`
                    }]);
                }
            } else {
                goodsKeyboard.push([{
                    text: '–í –±–æ—Ç–µ –Ω–µ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                    callback_data: `no_categories`,
                }]);
            }

            await shopBot.deleteMessage(chatId, messageId);

            return await shopBot.sendAnimation(chatId, './images/shop_goods-video.MP4', {
                parse_mode: "HTML",
                caption: '<b>–¢–æ–≤–∞—Ä—ã –æ—Ç –•–∞—Ä–¥–∞</b> üì¶' + '\n' +
                    '<u>–¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</u> ‚úÖ',
                reply_markup: {
                    inline_keyboard: goodsKeyboard
                }
            });
        }

        if (query.data.includes('changeSoldOutGood')) {
            const goodId = Number(query.data.split('_')[1]);
            const isSoldOut = Number(query.data.split('_')[2]);
            const iterator = Number(query.data.split('_')[3]);

            try {
                await db.run('UPDATE shop_goods SET soldOut = ? WHERE id = ?', [isSoldOut ? 0 : 1, goodId], function (err) {
                    if (err) {
                        return console.error(err.message);
                    }

                    console.log('AEDamount is updated');
                });
            } catch (e) {
                throw new Error(e);
            }

            await shopBot.answerCallbackQuery(queryId, {
                text: `–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –µ–≥–æ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${isSoldOut ? '–í –Ω–∞–ª–∏—á–∏–∏' : '–†–∞—Å–ø—Ä–æ–¥–∞–Ω–æ'}`,
                show_alert: true,
            });

            const cycleNum = iterator * 5;

            const goodsKeyboard = [];

            const goodsArr = await getAllShopBotGoodsFromDb(db);

            for (let i = cycleNum; i < cycleNum + 5; i++) {
                if (goodsKeyboard[i]) {
                    goodsKeyboard.push([{
                        text: `${goodsArr[i].name} - ${goodsArr[i].soldOut ? '–†–∞—Å–ø—Ä–æ–¥–∞–Ω–æ' : '–í –Ω–∞–ª–∏—á–∏–∏'}`,
                        callback_data: `changeSoldOutGood_${goodsArr[i].id}_${goodsArr[i].soldOut}_${iterator}`
                    }])
                }
            }

            const navigationButtons = [];

            if (iterator > 0) {
                navigationButtons.push({
                    text: `<<`,
                    callback_data: `changeSoldOutGoodsArr_${iterator - 1}`
                })
            }

            if (goodsArr.length > cycleNum + 5) {
                navigationButtons.push({
                    text: `>>`,
                    callback_data: `changeSoldOutGoodsArr_${iterator + 1}`
                });
            }

            goodsKeyboard.push(navigationButtons);

            return await shopBot.editMessageReplyMarkup({
                inline_keyboard: goodsArr.length ? goodsKeyboard : [{
                    text: "–í –±–æ—Ç–µ –Ω–µ—Ç—É —Ç–æ–≤–∞—Ä–æ–≤",
                    callback_data: 'empty'
                }]
            }, {
                chat_id: chatId,
                message_id: messageId
            });
        }

        if (query.data.includes('changeSoldOutGoodsArr')) {
            const iterator = Number(query.data.split('_')[1]);
            const cycleNum = iterator * 5;

            const goodsKeyboard = [];

            const goodsArr = await getAllShopBotGoodsFromDb(db);

            for (let i = cycleNum; i < cycleNum + 5; i++) {
                if (goodsArr[i]) {
                    goodsKeyboard.push([{
                        text: `${goodsArr[i].name} - ${goodsArr[i].soldOut ? '–†–∞—Å–ø—Ä–æ–¥–∞–Ω–æ' : '–í –Ω–∞–ª–∏—á–∏–∏'}`,
                        callback_data: `changeSoldOutGood_${goodsArr[i].id}_${goodsArr[i].soldOut}_${iterator}`
                    }])
                }
            }

            const navigationButtons = [];

            if (iterator > 0) {
                navigationButtons.push({
                    text: `<<`,
                    callback_data: `changeSoldOutGoodsArr_${iterator - 1}`
                })
            }

            if (goodsArr.length > cycleNum + 5) {
                navigationButtons.push({
                    text: `>>`,
                    callback_data: `changeSoldOutGoodsArr_${iterator + 1}`
                });
            }

            goodsKeyboard.push(navigationButtons);

            return await shopBot.editMessageReplyMarkup({
                inline_keyboard: goodsArr.length ? goodsKeyboard : [{
                    text: "–í –±–æ—Ç–µ –Ω–µ—Ç—É —Ç–æ–≤–∞—Ä–æ–≤",
                    callback_data: 'empty'
                }]
            }, {
                chat_id: chatId,
                message_id: messageId
            });
        }

        if (query.data.includes('deleteGood')) {
            const goodId = Number(query.data.split('_')[1]);

            try {
                await db.run('DELETE FROM shop_goods WHERE id = ?', [goodId], async function (err) {
                    if (err) {
                        throw new Error(err);
                    }
                });
            } catch (e) {
                throw new Error(e);
            }

            await shopBot.answerCallbackQuery(queryId, {
                text: `–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä –∏–∑ –±–æ—Ç–∞`,
                show_alert: true,
            });

            return await shopBot.editMessageText('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä –∏–∑ –±–æ—Ç–∞', {
                reply_markup: {
                    inline_keyboard: []
                },
                chat_id: chatId,
                message_id: messageId
            });
        }

        if (query.data.includes('changeDeleteGoodsArr')) {
            const iterator = Number(query.data.split('_')[1]);
            const cycleNum = iterator * 5;

            const goodsKeyboard = [];

            const goodsArr = await getAllShopBotGoodsFromDb(db);

            for (let i = 0; i < 5; i++) {
                if (goodsKeyboard[i]) {
                    goodsKeyboard.push([{
                        text: `${goodsArr[i].name} - ${goodsArr[i].soldOut ? '–†–∞—Å–ø—Ä–æ–¥–∞–Ω–æ' : '–í –Ω–∞–ª–∏—á–∏–µ'}`,
                        callback_data: `deleteGood_${goodsArr[i].id}`
                    }])
                }
            }

            const navigationButtons = [];

            if (iterator > 0) {
                navigationButtons.push({
                    text: `<<`,
                    callback_data: `changeDeleteGoodsArr_${iterator - 1}`
                })
            }

            if (goodsArr.length > cycleNum + 5) {
                navigationButtons.push({
                    text: `>>`,
                    callback_data: `changeDeleteGoodsArr_${iterator + 1}`
                });
            }

            goodsKeyboard.push(navigationButtons);

            return await shopBot.editMessageReplyMarkup({
                inline_keyboard: goodsArr.length ? goodsKeyboard : [{
                    text: "–í –±–æ—Ç–µ –Ω–µ—Ç—É —Ç–æ–≤–∞—Ä–æ–≤",
                    callback_data: 'empty'
                }]
            }, {
                chat_id: chatId,
                message_id: messageId
            });
        }
    });
}